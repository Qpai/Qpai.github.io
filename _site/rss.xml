<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>清凉派的博客</title>
        <description>清凉派的博客 - Qpai</description>
        <link>http://Qpai.github.io</link>
        <link>http://Qpai.github.io</link>
        <lastBuildDate>2014-07-20T17:16:55+08:00</lastBuildDate>
        <pubDate>2014-07-20T17:16:55+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Cocoapods实践记</title>
                <description>&lt;h1 id=&quot;cocoapods&quot;&gt;cocoapods实践记&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;公司有一个主客户端包含了很多频道的业务，若干个频道的app客户端，经常需要频道客户端的代码和主客户端的代码进行相互copy to each other。&lt;/p&gt;

&lt;p&gt;这样的问题在于，代码会被随意更改，不可复用，无法升级，工作量分散，&lt;/p&gt;

&lt;p&gt;所以我主张使用&lt;code&gt;cocoapods&lt;/code&gt;进行组件管理，当然有同学推荐我使用&lt;a href=&quot;http://schacon.github.io/git/user-manual.html#submodules&quot;&gt;git submodule&lt;/a&gt; 进行管理。&lt;/p&gt;

&lt;p&gt;公司这时有了一个新组件:X，主客户端和频道子app客户端都需要用到，我想，这是一个彻底改变项目开发问题的机会。&lt;/p&gt;

&lt;h2 id=&quot;cocoapods-1&quot;&gt;cocoapods介绍&lt;/h2&gt;

&lt;p&gt;其实不用我介绍，大多数iOS开发者都知道cocoapods。&lt;/p&gt;

&lt;p&gt;我们为了避免重复造轮子，经常会使用第三方库，而iOS的项目开发，如果引入第三方库，需要进行很多项目的配置，以前我们只能人肉手动去修改项目文件，现在有了cocoapods，帮助我们以最快的速度将第三方库导入我们项目中，只需一个命令行&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;真假美猴王&lt;/h2&gt;

&lt;p&gt;首先我开始对各个项目进行调研，马上问题出来了：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;公司的各个应用中存在相同的第三方库，但是版本不一样。&lt;/li&gt;
  &lt;li&gt;很多第三方库被改动了&lt;/li&gt;
  &lt;li&gt;各个项目中存在相同名称的类，但是功能不一样&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如Afnetworking，各个项目使用的是不同的版本，而且被改动了。有项目以前用的是老版本，但是后来看到了升级版本，手动加入了一部分升级功能，还不完全。&lt;/p&gt;

&lt;p&gt;经过了一些讨论，我们进行了如下工作，来减少项目代码冲突&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于相同的第三方库，各个项目进行版本调研，查找出项目的原始版本，和目前项目中使用的版本，有何不同，使用categroy等方式进行抽离，保证第三方库的完整和干净。2. &lt;/li&gt;
  &lt;li&gt;各个项目尽量使用相同版本的第三方库，各个项目同时进行升级&lt;/li&gt;
  &lt;li&gt;同时，各个项目的代码文件，必须添加前缀，避免类名冲突。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cocoapods-2&quot;&gt;cocoapods私有库&lt;/h2&gt;

&lt;p&gt;为了将新项目X使用cocoapods进行集成，我们在内部的git库中建立了私有的specs库&lt;/p&gt;

&lt;p&gt;按照&lt;a href=&quot;http://guides.cocoapods.org/making/private-cocoapods.html&quot;&gt;cocoapods private&lt;/a&gt;教程的介绍，我们进行建立。&lt;/p&gt;

&lt;p&gt;其实github上面的&lt;a href=&quot;https://github.com/CocoaPods/Specs/&quot;&gt;CocoaPods/Specs&lt;/a&gt;是cocoapods的公共配置库，如果想建立自己的私有配置库，只需要在自己的git服务器上面建一个项目，比如叫DemoSpecs。内容呢，就遵循如下路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── Specs
	└── [自定义库名]
    	└── [版本号]
        	└── [自定义库名].podspec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，私有库就建成了，每当我们需要加入一个私有新库的时候，只需要在Specs中增加一个文件夹，命名为&lt;code&gt;自定义库名&lt;/code&gt;，在其中放入不同版本的配置文件即可。&lt;/p&gt;

&lt;p&gt;当然这个时候，使用&lt;code&gt;pod search customPod&lt;/code&gt;还是搜不到东西的，你需要把这个DemoSPecs克隆到本地去。&lt;/p&gt;

&lt;p&gt;打开终端，输入以下命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod repo add REPO_NAME SOURCE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中REPO_NAME 是你本地的specs库名，这个可以自定义。而SOURCE_URL是DemoSpecs的git地址。&lt;/p&gt;

&lt;p&gt;这时候使用&lt;code&gt;pod search customPod&lt;/code&gt;就能搜到你私有cocoapod的库了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;单体双胞胎&lt;/h2&gt;

&lt;p&gt;我们在开发新组件X的的过程中，使用了以前的老代码，而新组件的这部分老代码使用的是MRC，而新代码使用了ARC，这是复杂呀。那么如何在配置文件中，对这两部分代码进行区分呢？&lt;/p&gt;

&lt;p&gt;podspecs文件中是可以配置&lt;code&gt;subspec&lt;/code&gt;的，我将两部分代码进行了拆分，幸运的时候两部分代码一部分是数据处理，一部分是UI，那么我建立了两个文件夹分别存放这两部分代码，同时在podSpecs中配置了子&lt;code&gt;subspec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subspec &quot;data&quot; do |sp|
  	sp.source_files = &quot;Classes/data&quot;
  	sp.requires_arc = false
end

subspec &quot;UI&quot; do |sp|
  	sp.source_files = &quot;Classes/UI&quot;
  	sp.requires_arc = true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，集成的时候，就会对两部分代码进行分别配置。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;静态库的处理&lt;/h2&gt;

&lt;p&gt;我们用到了静态库，在开发语音模块的过程中，使用了&lt;code&gt;libopencore-amrnb.a&lt;/code&gt;的静态库，静态库如何集成进项目中呢？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.cocoapods.org/syntax/podspec.html#vendored_libraries&quot;&gt;vendored_libraries&lt;/a&gt;给了我们答案：&lt;/p&gt;

&lt;p&gt;spec.vendored_libraries = ‘libProj4.a’, ‘libJavaScriptCore.a’&lt;/p&gt;

&lt;p&gt;不过切记，这里写的路径，必须是git的路径，把路径写全了，只写一个.a文件名，可集成不进去。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;为什么我老是集成失败？&lt;/h2&gt;

&lt;p&gt;我们在项目中使用了&lt;code&gt;yajl-json&lt;/code&gt;，发现每次集成的时候都失败了。老是有文件没有集成进去，后来发现，cocoapods允许pod在install之后执行其他命令，而yajl执行了&lt;code&gt;cmake&lt;/code&gt;命令，而我们没有安装&lt;code&gt;cmake&lt;/code&gt;命令行工具，就导致了我们没有集成成功。&lt;/p&gt;

&lt;h2 id=&quot;cocoapods-3&quot;&gt;为什么使用cocoapods集成之后包变大了？&lt;/h2&gt;

&lt;p&gt;我想说其实这是一个伪命题，其实包没有大，只是Cocoapods帮你在项目里面多加了几个armv而已.至少我发现的是这样。&lt;/p&gt;

&lt;h2 id=&quot;tag&quot;&gt;为什么让我每次都重新生成tag？？&lt;/h2&gt;

&lt;p&gt;我们在开发的过程中，直接引用的是git地址+tag方式，结果迭代过程中，每次修改，项目组其他成员集成的之前，都必须重新生成一次tag。我承认我犯二了。。其实cocoapods给了解决方案，那就是直接指向git地址，最终发布release版本后，再生成tag，这样就可以了。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;终于碰到的技术问题都解决了，&lt;code&gt;pod install&lt;/code&gt;之后，新组件X终于集成进了各个项目里面。&lt;/p&gt;

&lt;p&gt;感谢Cocoapods的团队，为我们提供了这么牛的工具!!&lt;/p&gt;
</description>
                <link>http://Qpai.github.io/2014/07/20/cocoapods%E5%AE%9E%E8%B7%B5%E8%AE%B0</link>
                <guid>http://Qpai.github.io/2014/07/20/cocoapods实践记</guid>
                <pubDate>2014-07-20T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>用runtime生成一个类</title>
                <description>
&lt;h3 id=&quot;section&quot;&gt;生成类&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先判断一下是否已经存在了这个类&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; if (objc_lookUpClass(keyName)) {
     return YES;
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;获取父类&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Class superClass = objc_getClass(&quot;NSObject&quot;);
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;一般来讲，用底层的NSObject类做父类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;向内存中添加类&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Class newClass = objc_allocateClassPair(superClass, newClassName, 0);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;给类添加属性&lt;/h3&gt;

&lt;p&gt;有了类，该往类中添加属性了，也就是类的属性，及其存取。&lt;/p&gt;

&lt;p&gt;其实有一种最简单的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class_addMethod(newClass, NSSelectorFromString(@&quot;getName&quot;), imp_implementationWithBlock(^(id obj){
    return objc_getAssociatedObject(obj, &quot;name&quot;);
    
}), &quot;@@:&quot;);

class_addMethod(newClass, NSSelectorFromString(@&quot;setName:&quot;), imp_implementationWithBlock(^(id obj ,NSString *value){

    objc_setAssociatedObject(obj, &quot;name&quot;, value, OBJC_ASSOCIATION_RETAIN);
}), &quot;v@:@&quot;);

[obj1 performSelector:NSSelectorFromString(@&quot;setName:&quot;) withObject:@&quot;HelloName&quot;];
id value = [obj1 performSelector:NSSelectorFromString(@&quot;getName&quot;)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式使用了AssociatedObject对象，完全和ivar和property无关，AssociatedObject通过设置objc_AssociationPolicy可以实现property的一些功能，包括copy，retain等。&lt;/p&gt;

&lt;p&gt;接下来，我们使用比较麻烦的方法，给类声明ivar和property，及其存取方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先添加ivar，因为property是和ivar相关联的。我们声明添加一个_title的ivar&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; class_addIvar(newClass, &quot;_title&quot;, sizeof(id), log2(sizeof(id)), &quot;@&quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;class_addIvar&lt;/code&gt;有五个参数分别是:&lt;/p&gt;

&lt;p&gt;需要添加ivar的类，
ivar的变量名，
实例变量类型所占内存的大小，比如是一个NSString *的ivar，应该用sizeof(NSString *)
ivar的最小基准数
ivar类型的类型编码，最好用 @encode(NSString *)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;给类添加property&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; objc_property_attribute_t t = {&quot;T&quot;,&quot;@\&quot;NSString\&quot;&quot;};
 objc_property_attribute_t n = {&quot;N&quot;,&quot;&quot;};
 objc_property_attribute_t r = {&quot;&amp;amp;&quot;,&quot;&quot;};
 objc_property_attribute_t v = {&quot;V&quot;,&quot;_title&quot;};
 objc_property_attribute_t a[] = {t,n,r,v};
 class_addProperty(newClass, &quot;title&quot;, a, 4);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;N，&amp;amp;代表什么，请查寻一下&lt;a href=&quot;https://developer.apple.com/library/mac/DOCUMENTATION/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW1&quot;&gt;Declared Properties 声明属性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过，objc_property_attribute_t更像是一种声明，告诉属性的使用者有这些特性，但是addProperty的时候，并没有帮你实现，比如retain，比如copy&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;给类的属性添加存取方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;IMP imp_implementationWithBlock(void *block);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过一个block的指针，实现一个IMP，根据苹果文档的注释，这个block一般遵循如下格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method_return_type ^(id self, self, method_args …)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;method_args …&lt;/code&gt;就是可变参数列表，第一个参数&lt;code&gt;id self&lt;/code&gt;是接收消息的对象，而第二个参数self，其实应该是&lt;code&gt;SEL _cmd&lt;/code&gt;，一个IMP都会有接收消息的对象，和_cmd这两个参数，不过在这个block的声明中可以忽律掉&lt;code&gt;SEL _cmd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.friday.com/bbum/2011/03/17/ios-4-3-imp_implementationwithblock/&quot;&gt;iOS 4.3: imp_implementationWithBlock()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这篇文章解释了为什么&lt;code&gt;SEL _cmd&lt;/code&gt;不用声明出来（挺长，英文复杂没翻译出来，以后需要在深入研究）&lt;/p&gt;

&lt;p&gt;如果你想实现一个下面方法的IMP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (int)skew:(int)j
{
    return j + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应该写成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IMP skewIMP = imp_implementationWithBlock(^(id _s, int k)
    {
        return k + 1;
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里，_s就接收消息的对象，而&lt;code&gt;SEL _cmd&lt;/code&gt;被忽略掉了，&lt;code&gt;int k&lt;/code&gt;就是参数了。&lt;/p&gt;

&lt;p&gt;好了，该实现我们自己的存取方法了。这里仅仅进行简单复制，copy，和retain请自行解决。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class_addMethod(newClass, NSSelectorFromString(@&quot;getTitle&quot;), imp_implementationWithBlock(^(id obj){
        Ivar titleVar = class_getInstanceVariable(newClass, &quot;_title&quot;);
        return  object_getIvar(obj, titleVar);
    }), &quot;v@:&quot;);
class_addMethod(newClass, NSSelectorFromString(@&quot;setTitle:&quot;), imp_implementationWithBlock(^(id obj ,NSString *value){
    Ivar titleVar = class_getInstanceVariable(newClass, &quot;_title&quot;);
    object_setIvar(obj, titleVar, value);
}), &quot;v@:@&quot;);
id obj1 = [newClass new];
[obj1 performSelector:@selector(setTitle:) withObject:@&quot;321a&quot;];
NSLog(@&quot;%@&quot;,[obj1 performSelector:@selector(getTitle)]) ;
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://Qpai.github.io/2014/06/11/%E7%94%A8runtime%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E7%B1%BB</link>
                <guid>http://Qpai.github.io/2014/06/11/用runtime生成一个类</guid>
                <pubDate>2014-06-11T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>合法使用cocoapods</title>
                <description>&lt;p&gt;— layout: post category : 翻译 title : Afnetworking 2.0 Tutorial tags : [AFNetworking, ios, blog, developer] — &lt;/p&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;合法使用CocoaPods&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.bignerdranch.com/4638-using-cocoapods-without-going-court/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;把基于不同授权协议下的不同作者的源码引入到了你的项目中，这个过程简单的都有点过份。但是当心：感谢CocoaPods，你也以比过去快两倍的速度被卷入了版权麻烦中。&lt;/p&gt;

&lt;p&gt;你想想，每个CocoaPod都基于软件授权协议下被分发，这个软件授权协议对你是有要求的。遵守它，你才能使用这个软件。但是如果你不想遵守授权协议的要求内容，你就失去了使用这个软件的权利。然后你必须删除这个pod并且做一些其他的事情。否则，你将会面临：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;应用被驳回。&lt;/li&gt;
  &lt;li&gt;上法庭。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;我不是一个法律从业人员，你知道吗？&lt;/h2&gt;

&lt;p&gt;在我们开始之前，有些事情必须说清楚：这篇文章不是法律建议，如果你目前遇到了和授权相关的问题，那么请你去找法律顾问。如果你没有理由的担心，并且已经影响了你的生活质量，那么看一下心理医生吧还是。&lt;/p&gt;

&lt;h2 id=&quot;cocoa&quot;&gt;不只是COCOA的问题&lt;/h2&gt;

&lt;p&gt;就算你不是一个Cocoa开发，这也会对你有用，只需要把CocoaPods换成gems/modules/packages/或者其他什么，和我们一起讨论。这也是我们这些在Cocoa平台上正在以光的速度违反软件授权协议的人乐于看到的。&lt;/p&gt;

&lt;p&gt;在你的世界里可能流行不同的软件授权协议。检出&lt;a href=&quot;https://tldrlegal.com/&quot;&gt;tl;drLegal&lt;/a&gt;为一个gist，然后就像吃一顿美味的意大利面条一样好好研究一下授权协议文本。很多授权协议的作者也会解答一些问题，这能帮助你理解和运用软件授权协议。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;没协议不使用&lt;/h2&gt;

&lt;p&gt;如果没有软件授权协议，默认的软件授权协议如下：作者独家使用，你不能使用。&lt;/p&gt;

&lt;p&gt;苹果帮我们做了些事情，在一个新文件的样板文件中包含了一个独家权利声明。很多项目没有去修改每个独立源文件的声明文本，这使人不安。如果有疑问，就检查一下README，LICENSE 或者COPYING文件，去看看是否有一些其他的软件授权协议。如果你没有找到，从你的app中删除这段有害的代码。&lt;/p&gt;

&lt;p&gt;当你复制一个组件的代码，你必须确保维护了它的软件授权协议。CocoaPods 维护了，但是如果你手动添加第三方的组件，你就得小心。&lt;/p&gt;

&lt;h3 id=&quot;academic--&quot;&gt;ACADEMIC软件授权协议：注意 &amp;amp; 条款&lt;/h3&gt;

&lt;p&gt;一个软件授权协议最通常的要求是包括版权注意和软件授权协议条款。MTI软件协议就像下面这样:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你应该遵守每个pod设定的最小范围的条款，CocoaPods就是这么做的，它将所有pod的条款复制整合成一个大的授权协议文件，然后帮助你满足这些条款。该文件有两种形式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在你的app中以Markdown的文件存在。&lt;/li&gt;
  &lt;li&gt;以Plist的形式被包含在设置中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;显示这些信息是为了让用户更容易看到他正在用的组件，它也给组件的作者以宣传。就是说，仅仅包含在你的app包中的注意和条款可能不够，你的app的每个副本都会包含他们。&lt;/p&gt;

&lt;p&gt;很多所谓的学术许可证其实什么要求也没有。一般学术许可证包括这些：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;麻省理工许可证（MIT,又称X 11）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/BSD-3-Clause&quot;&gt;新版3条款的BSD license (Berkeley Software Distribution 伯克利软件套件 开源协议)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/BSD-2-Clause&quot;&gt;简版2条款的BSD licenes&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/ISC&quot;&gt;最简1条款的BSD licenes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;apache-20&quot;&gt;APACHE 2.0&lt;/h3&gt;

&lt;p&gt;在冗长的注意和条款上面，Apache 许可证加上了：“你必须在你修改的文件显著位置标明：你修改了文件”&lt;/p&gt;

&lt;p&gt;源码控制让你更容易发现你修改了开源协议文件，如果你修改了，插入一个评论的权利在Apache许可声明下面，像下面这样写上：“MODIFIED (年份) BY (修改人名字). Modifications licensed under (LICENSE).”给一个注意，问题就解决了。&lt;/p&gt;

&lt;p&gt;还有一件事情需要注意：如果这库包含了注意文本文件，那么你需要把它包含到通用注意和条款所在的文件夹中。如果没有注意文件，你就可以忽律法律问题，算你走运。&lt;/p&gt;

&lt;h3 id=&quot;lgpl&quot;&gt;LGPL&lt;/h3&gt;

&lt;p&gt;LGPL 是GNU库（2.0版本）或者Lesser General Public License（2.1版本及以后版本）。很少有iOS软件支持LGPL。&lt;/p&gt;

&lt;p&gt;我们唯一的选项是静态引入到其他代码，所以基于LGPL的组件必须为使用者开源。使用者也可以修改，并且发布他们自己的版本，但是也必须开源。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I recommend you steer clear of using any LGPL-licensed software in a close-sourced app.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我建议你的闭源应用完全不要包括任何使用LGPL条款的软件。&lt;/p&gt;

&lt;h3 id=&quot;gpl&quot;&gt;GPL&lt;/h3&gt;

&lt;p&gt;The GPL is the GNU General Public License.
GPL就是GNU General Public License。如果你的应用中包含任何限制在GPL条款下的代码，都不能被发布到appstore中。GPL禁止增加任何条款或者条件在GPL的条款之上。APPStore增加了额外的条款在GLP之上，所以非GPL的代码才能出现在Appstore中。&lt;/p&gt;

&lt;p&gt;如果你不是要发布到appstore中，那么你可以拉取GPL库，记住，你的代码也要获得GPL的许可。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;条款会混合使用吗？&lt;/h3&gt;

&lt;p&gt;有些软件授权协议是和其他授权协议不兼容的。有时意味着你不能在你的应用中同时使用这些不同协议的代码。不过，当今大多数情况下，这不是个问题。除了GPL，你基本不需要担心这个问题。&lt;/p&gt;

&lt;p&gt;你必须去读你使用的代码的授权协议，并且确保你真的看懂了。你认真读几次，你基本就能将不同协议之间的作用弄清楚。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果你不遵守软件授权协议，那么你就是亵渎法律&lt;/li&gt;
  &lt;li&gt;使用MIT或者BSD条款下的代码，只需要将授权协议和版权文件，放到你的应用包里。&lt;/li&gt;
  &lt;li&gt;用Apache 2.0协议的代码是免费的，增加授权协议文件和版权文件在你的应用包中，放到MIT或者BSD同样的位置。必须复制完整的授权协议文本。
    &lt;ol&gt;
      &lt;li&gt;如果你改变了任何的Apache文件，那么你必须为你的改变增加一个突出显示的NOTICE。&lt;/li&gt;
      &lt;li&gt;如果已经有了NOTICE文件，那么就复制到你的应用包中，放到一个用户可以看到的地方，设置模块是比较理想的地方。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;不用考虑GPL或者LGPL的代码，除非你想为它头疼或者被AppStore驳回。&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://Qpai.github.io/2014/05/11/%E5%90%88%E6%B3%95%E4%BD%BF%E7%94%A8cocoapods</link>
                <guid>http://Qpai.github.io/2014/05/11/合法使用cocoapods</guid>
                <pubDate>2014-05-11T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>自动化分发到testflight脚本</title>
                <description>
&lt;p&gt;最近公司项目有一些分发的需求，所以我搜索了一些资料，实现了自动打包并且上传到testflight的脚本。&lt;/p&gt;

&lt;p&gt;大概需求有这些&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将版本号和用户名显示在图标上面&lt;/li&gt;
  &lt;li&gt;Archive一个HOC的包&lt;/li&gt;
  &lt;li&gt;本地备份一个ipa和dsym文件&lt;/li&gt;
  &lt;li&gt;上传至Testflight&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;一、图标显示版本号&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装两个shell工具&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; brew install imagemagick  
 brew install ghostscript
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在Build Phases，新建一个Run Script。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    #这里可以讲版本号设置成SVN或者git的版本号，以防冲突  #/usr/libexec/PlistBuddy -c &quot;Set :CFBundleVersion ${SVN_REVISION}&quot;&quot;$INFO_PLIST_PATH&quot;  version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; &quot;${INFOPLIST_FILE}&quot;`
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;function processIcon() {
     export PATH=$PATH:/usr/local/bin
     base_file=$1
     base_path=&lt;code&gt;find &quot;${SRCROOT}/&amp;lt;project name&amp;gt;&quot; -name $base_file&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; echo &quot;Processing 43 $base_path&quot;
    
 if [[ ! -f ${base_path} || -z ${base_path} ]]; then
 return;
 fi
    
 echo &quot; 11 ${target_path}&quot;
    
 target_file=$base_file
 target_path=&quot;${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/${target_file}&quot;
    
    
    
 if [ $CONFIGURATION = &quot;Release&quot; ]; then
 cp &quot;${base_path}&quot; &quot;$target_path&quot;
 return
 fi
    
 width=`identify -format %w &quot;${base_path}&quot;`
    
 convert -background &#39;#0008&#39; -fill white -gravity center -size ${width}x40\
 caption:&quot;${version} ${LOGNAME}&quot;\
 &quot;${base_path}&quot; +swap -gravity south -composite &quot;${target_path}&quot;
    
 echo &quot;Overlayed ${target_path}&quot;  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;processIcon “Icon_base.png”
 processIcon “Icon_base@2x.png”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;这里只涉及到了Icon.png和Icon@2x.png的图标，还可以增加更多。  &lt;/li&gt;
  &lt;li&gt;处理了release的配置，如果发布状态，则不显示版本号，可以根据需求修改。  &lt;/li&gt;
  &lt;li&gt;脚本编辑框下面有一个选项：Show environment variables in build   log。如果勾上，那你的log就会出现一堆本地的环境变量及其值，你可以打印出来，写脚本的时候就知道哪些是可以用的环境变量。但是如果调试shell脚本的时候最好不勾上，因为很多，而log最多显示200行，你shell的log可能会被隐藏掉，影响你的调试。  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二、自动打包和上传。&lt;/h2&gt;
&lt;p&gt;在xcode左上角找到edit schame，然后找到左边有Archive，点击旁边的三角，在post-actions增加一个run script。因为需要archive之后，才能找到相应的xcarchive文件，所以是后置运行脚本。&lt;/p&gt;

&lt;p&gt;shell脚本如下：
    #!/bin/sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#  Script.sh
#  IconOverlaying
#
#  Created by Li Yi on 14-3-9.
#  Copyright (c) 2014年 pixle. All rights reserved.


# define vars
TESTFLIGHT_TEAM_TOKEN=&quot;&amp;lt;team token&amp;gt;&quot;
TESTFLIGHT_API_TOKEN=&quot;&amp;lt;user token&amp;gt;&quot;
TESTFLIGHT_DISTRIBUTION_LIST=&quot;QpaiTeam&quot;
BACK_UP_PATH=&quot;${SOURCE_ROOT}/IpaBackup&quot;



echo &quot;find last Archives&quot;
newest=
backIFS=$IFS
IFS=$(echo -en &#39;\n\b&#39;)
for f in `find ~/Library/Developer/Xcode/Archives -name *.xcarchive`
do
if [ -z $newest ]
then
newest=$f
elif [ $f -nt $newest ]
then
newest=$f
fi
done
echo &quot;${f}&quot;
FS=$backIFS

LASTARCHIVE_PATH=$f

# it&#39;s build version,or git version or svn version
VERSION=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; &quot;${INFOPLIST_FILE}&quot;`

IPA_PATH=&quot;${BACK_UP_PATH}/${VERSION}.ipa&quot;
DSYM_PATH=&quot;${LASTARCHIVE_PATH}/dSYMs/${PROJECT_NAME}.app.dSYM&quot;
COPY_DSYM_PATH=&quot;${BACK_UP_PATH}/${VERSION}.app.dSYM&quot;

# create backup folder
mkdir -p &quot;${BACK_UP_PATH}&quot;

rm &quot;${IPA_PATH}&quot;

echo &quot;create ipa from archive&quot;

xcodebuild -exportArchive -exportFormat IPA -archivePath &quot;${LASTARCHIVE_PATH}&quot; -exportPath &quot;${IPA_PATH}&quot;

echo &quot;copy dsym to back-up&quot;
cp -r &quot;${DSYM_PATH}&quot; &quot;${COPY_DSYM_PATH}&quot;


#zipping the .dSYM to send to Testflight
echo &quot;Generating dsym zip file&quot;
/usr/bin/zip -r &quot;${COPY_DSYM_PATH}.zip&quot;&quot;${COPY_DSYM_PATH}&quot;

# sends the .ipa file to TestFlight




echo &quot;Sending to TestFlight&quot;
curl http://testflightapp.com/api/builds.json -F file=&quot;@${IPA_PATH}&quot; \
-F dsym=&quot;@${COPY_DSYM_PATH}.zip&quot; \
-F api_token=&quot;${TESTFLIGHT_API_TOKEN}&quot; \
-F team_token=&quot;${TESTFLIGHT_TEAM_TOKEN}&quot; \
-F notes=&quot;This build was uploaded via the upload API&quot; \
-F notify=False \
-F distribution_lists=&quot;${TESTFLIGHT_DISTRIBUTION_LIST}&quot;
echo Submission ended
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;执行了如下功能：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;寻找最后一个archive&lt;/li&gt;
  &lt;li&gt;生成一个本地备份的文件夹&lt;/li&gt;
  &lt;li&gt;通过最后一个archive生成一个以build版本号命名的ipa，并且保存于备份文件夹中。&lt;/li&gt;
  &lt;li&gt;把最后一个archive的dsym文件复制到备份文件中，并且重命名为版本号。&lt;/li&gt;
  &lt;li&gt;把dsym文件打包成zip&lt;/li&gt;
  &lt;li&gt;通过curl将ipa和dysm上传到testflight&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;解释一些需要设置的变量名含义：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;TESTFLIGHT_TEAM_TOKEN就是你Testflight里面team的token&lt;/li&gt;
  &lt;li&gt;TESTFLIGHT_API_TOKEN是你用户的token&lt;/li&gt;
  &lt;li&gt;TESTFLIGHT_DISTRIBUTION_LIST是你的包分发的目标受众，可以是team名，也可以是用户名，用逗号隔开。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意： 最下面的curl就是上传到testflight的接口，和传参。具体是不是上传正确了，需要看log。&lt;/p&gt;
</description>
                <link>http://Qpai.github.io/other/2014/03/09/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%86%E5%8F%91%E5%88%B0testflight%E8%84%9A%E6%9C%AC</link>
                <guid>http://Qpai.github.io/other/2014/03/09/自动化分发到testflight脚本</guid>
                <pubDate>2014-03-09T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Dyci动态注入实践</title>
                <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
category : other
tags : [Dyci, ios, blog, developer ,插件 ,xcode]
—&lt;/p&gt;

&lt;p&gt;昨天晚上看到了infoQ的iOS周报，发现了一个非常酷的动态注入库&lt;a href=&quot;https://github.com/DyCI/dyci-main&quot;&gt;DyCi&lt;/a&gt;，他可以做到动态的把代码注入到已经运行的程序中。&lt;/p&gt;

&lt;p&gt;可能有些同学还是不太明白具体有什么用，我给大家解释一下：&lt;/p&gt;

&lt;p&gt;可以在开发的过程中，修改UI代码，而不用重新编译就可以在模拟器上面看到修改后的效果。&lt;/p&gt;

&lt;p&gt;是不是很酷，让你瞬间想到了当年在xcode上面用代码写UI，而改一个数值就必须运行一遍看一下效果的黑暗日子？对，天亮了，你可以避免苦难了。&lt;/p&gt;

&lt;p&gt;这篇文章虽然叫实践，其实目前只是对Dyci文档的摘抄，和我简单尝试，以后随着实践的深入还会陆续加入新的内容。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;安装步骤&lt;/h2&gt;

&lt;p&gt;首先看一下安装步骤(&lt;a href=&quot;https://github.com/DyCI/dyci-main/wiki/Installation&quot;&gt;官方安装介绍&lt;/a&gt;)，因为Dyci需要在xcode上面安装一个插件，所以需要你运行一个sh的脚本。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载脚本&lt;/li&gt;
  &lt;li&gt;cd 到脚本目录&lt;/li&gt;
  &lt;li&gt;运行脚本&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/DyCI/dyci-main.git&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd dyci-main/Install/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;/install.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果出现下面的提示，证明你安装成功了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;== Backing up clang : Done.
== Faking up clang : Done.
== Preparing dyci-recompile : Done.
== Copying scripts : Done.
== AppCode found. Installing DYCI as AppCode external tool : Done.
== Installing Xcode DCI plugin : Done.
Now you can use DCI from the Xcode :P (^X)

DCI was successfully installed!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重启Xcode，因为涉及到插件，必须重启在能看到，重启之后，会在xcode的菜单product中看到recompile and inject项，还有快捷键^X。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;引入工程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;最简单的办法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用cocoapod，在Podfile中加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;dyci&#39;, :git =&amp;gt; &#39;https://github.com/DyCI/dyci-main.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;作为自项目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将dyci项目加入到你工程项目的workspace中，并且在工程项目的Build Phase的Link Binary With Libraries中加入对dyci的依赖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/DyCI/dyci.github.com/master/img/dyci-adding-as-static-library.png&quot; alt=&quot;https://raw.github.com/DyCI/dyci.github.com/master/img/dyci-adding-as-static-library.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为静态库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载dyci.framework从&lt;a href=&quot;https://github.com/DyCI/dyci-main/downloads&quot;&gt;这里&lt;/a&gt; &lt;br /&gt;
加入静态库到你的项目中 &lt;br /&gt;
在other link flag中加入-Objc&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;碰到的问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;xib可以动态变动，但是代码不行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我新建了一个单页面项目，在里面加入了一个label，^x，可以动态呈现。可是我在VC中的viewDidLoad给self.view加入label，却不能动态呈现，找了半天最后发现了&lt;a href=&quot;https://github.com/DyCI/dyci-main/wiki/Update-on-Injection&quot;&gt;答案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;dyci的wiki是这么说的，代码注入有时候不允许你改变当前已经生成的实例，因为你的VC已经通过initWithNibName生成了实例，所以viewDidLoad加入的代码都不能动态更新。这时就需要你在你想要注入的类中实现&lt;code&gt;-(void)updateOnClassInjection&lt;/code&gt;，这个方法会在你要对当前类或者其子类的实例进行注入的时候调用，下面是例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
   [super viewDidLoad];
   [self createGUI];

}

- (void)updateOnClassInjection {
   // &quot;Emulating&quot; viewDidLoad method  
   // Cleaning up all views and  
   NSArray * subviews = [[self view] subviews];
   for (UIView * v in subviews) {
      [v removeFromSuperview];
   }
   [self createGUI];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个wiki里面，也涉及到了资源的注入，需要实现另外一个方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void)updateOnResourceInjection:(NSString *)resourcePath
&lt;/code&gt;&lt;/pre&gt;

</description>
                <link>http://Qpai.github.io/2014/03/03/DyCI%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5%E5%AE%9E%E8%B7%B5</link>
                <guid>http://Qpai.github.io/2014/03/03/DyCI动态注入实践</guid>
                <pubDate>2014-03-03T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>用cocoapod模块化大型ios应用</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://dev.hubspot.com/blog/architecting-a-large-ios-app-with-cocoapods?utm_campaign=iOS_Dev_Weekly_Issue_132&amp;amp;utm_medium=email&amp;amp;utm_source=iOS%2BDev%2BWeekly&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为你的移动应用选择一个正确的架构是一件非常重大的决定。它会影响你的日常工作流程，框架你可能遇到的问题，可能是巨大的财富，也可能是巨大的负担。&lt;/p&gt;

&lt;p&gt;HubSpot的应用具有完整的功能，在一个根导航下，它包括一个分析应用，一个社交媒体应用，一个邮件应用和一个联系人管理应用(甚至有更多)。去年夏天，当我们着手建立这个复杂的应用的时候，就知道不得不构建一个适合它规模的架构。&lt;/p&gt;

&lt;p&gt;我们其实把每个子应用都当成了一个完全独立的应用，然后用&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;去把他们整合到一个主应用中。&lt;/p&gt;

&lt;p&gt;在下面截图中，你能看到每个子应用是怎么作为一个独立的app被整合进主应用的菜单中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png&quot; alt=&quot;http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这给了我们巨大的方便：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最关键的是，我们可以很容易的确保子应用的主分支都是可用的，也可以用子应用的特定版本进行构建。&lt;/li&gt;
  &lt;li&gt;我们花大量的时间构建，很少的时间合并。每个个体应用的沙箱可以让它在每个子应用内部迭代，并且花极少的时间与其他子应用整合到一起。如果你在一个有几个人的iOS团队中工作，你肯定会进行.xcodeproj合并。虽然有&lt;a href=&quot;http://stackoverflow.com/questions/2615378/how-to-use-git-properly-with-xcode&quot;&gt;解决方案&lt;/a&gt;，但真是一件痛苦的事情。不过我们现在可以完全避开它了。&lt;/li&gt;
  &lt;li&gt;如果有必要，我们可以独立部署每个应用。能在单个应用层次下进行可用性测试是一个巨大的惊喜。我们能在整合之前提交给测试人员，这样我们可以获得更高的品质，更有针对性的反馈。&lt;/li&gt;
  &lt;li&gt;因为子应用的切换仅是基于URL的(后面我们会讲到)，这意味着路径内置并且被记录，而不是建了一个特定的视图，去搜索一堆UIViewController，是有明确的路线的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们在一个多人团队里构建一个多功能的应用的时候这种架构为我们节省了大量的时间。听起来像你的菜对吗？往下读吧。&lt;/p&gt;

&lt;h2 id=&quot;web&quot;&gt;从Web中学习&lt;/h2&gt;

&lt;p&gt;拆分我们的移动应用为一系列的子应用的灵感来源于HubSpot的web架构。&lt;/p&gt;

&lt;p&gt;HubSpot的Web架构为了开发速度和可扩展性为构建。我的同事在开发的过程中，我们用了大量的工具和技术，以至于我们&lt;a href=&quot;ttp://dev.hubspot.com/blog/how-we-deploy-300-times-a-day&quot;&gt;每天有三百次的部署&lt;/a&gt;。这是非常重要的，HubSpots产品，是由若干松耦合但是却不同的应用 – 分析，社交媒体，邮件，日志，和报告工具组合而成。&lt;/p&gt;

&lt;p&gt;在Web上面，我们可以编译，测试，部署HubSpot应用独立的每个小模块，包括后端Api和用JAVA写的一些代码，前端的CoffeScript项目，Python项目。移动应用为什么不能做相同的事情呢？&lt;/p&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;使用CocoaPods&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;，非常出色的iOS依赖管理解决方案，是把每件事聚合到一起钥匙。&lt;/p&gt;

&lt;p&gt;对于你的这种情况来说一个多应用架构可能有点大材小用，可是CocoaPods当然不是，即使你只是为了聚合少数的类似于使用跟踪、视图组件，或者网络的第三方库，投资几分钟设置它对你来说也是非常值得的。ruby类似于gem一样的语法可以把开源组件几乎无缝的整合到你的应用中。&lt;/p&gt;

&lt;p&gt;核心库和共享资源比如登陆，装饰类，以及API/证书的持久化，还有存取器与&lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt;的测试文件，一个podspec描述文件构建成一个独立的项目。我们发布它们到我们的&lt;a href=&quot;http://guides.cocoapods.org/making/private-cocoapods.html&quot;&gt;私有CocoaPods库&lt;/a&gt;中，并且把他们包含在我们现在完整编译的项目里。但是，我们更进一步，分别建立每个应用，包括社交媒体、邮箱，或者Sources，例如建立一个由podspec描述的独立的项目，然后用CocoaPods构建到一个单独的应用里面。&lt;/p&gt;

&lt;p&gt;这意味着，我们可以独立测试每个独立应用的版本，能快速的处理每个单独应用的变化，而不用担心是否会影响其他开发者开发的不相关的子应用的编译。&lt;/p&gt;

&lt;p&gt;这个Podfile是针对我们的应用的，大概像下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;platform :ios, &#39;6.0&#39;
 
# networking, slider navigation, routing
pod &#39;AFNetworking&#39;, &#39;~&amp;gt; 1.2.1&#39;
pod &#39;ViewDeck&#39;, &#39;~&amp;gt; 2.2.11&#39;
pod &#39;JLRoutes&#39;, &#39;~&amp;gt; 1.2&#39;
 
# sub-apps, pulling from the head of each repo for development. alternately, we can pin it to a release version like we do the other pods
pod &#39;HSAPIClient&#39;, :head
pod &#39;HSCommonResources&#39;, :head
pod &#39;HSMarketingGraderApp&#39;, :head
pod &#39;HSContactsApp&#39;, :head
pod &#39;HSDashboardApp&#39;, :head
pod &#39;HSLoginApp&#39;, :head
pod &#39;HSSocialApp&#39;, :head
pod &#39;HSSourcesApp&#39;, :head
pod &#39;HSSettingsApp&#39;, :head
pod &#39;HSSocialReach&#39;, :head
pod &#39;HSEmailApp&#39;, :head
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;最终整合&lt;/h2&gt;

&lt;p&gt;聪明的读者会注意到我们用了一组开源工具，这是能把子应用粘合到一起的关键，&lt;a href=&quot;https://github.com/Inferis/ViewDeck&quot;&gt;IIViewDeck&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/joeldev/JLRoutes&quot;&gt;JLRoutes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们并没有提供信息在基应用，关于不同的目录选项，安排每个字应用能操作，每个子应用提供单独的类，实现一个HSBaseApp协议，用几个方法。&lt;/p&gt;

&lt;p&gt;我们现在并没有提供任何信息给基应用，为了让它可以处理每个菜单中的选项，和安排每个子应用的操作，每个子应用都提供一个实现了HSBaseApp协议若干方法的类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol HSBaseApp &amp;lt;NSObject&amp;gt;
+ (UINavigationController 	*)baseNavigationController;
+ (NSArray *)menuItems;
+ (NSArray *)routesToRegister;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是实现的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (UINavigationController *)baseNavigationController {
    return [[HSNavigationController alloc] initWithRootViewController:[[HSSocialViewController alloc] initWithNibName:@&quot;HSSocialViewController&quot; bundle:nil]];
}
 
+ (NSArray *)menuItems {
    HSMenuItem *calendarMenuItem = [[HSMenuItem alloc] initWithTitle:@&quot;Publishing&quot; icon:@&quot;\\&quot; launchHubSpotApp:[HSSocial class]];
    calendarMenuItem.sectionTitle = @&quot;Social&quot;;
    
    return @[calendarMenuItem];
}
 
+ (NSArray *)routesToRegister {
    HSRoute *newItemRoute = [HSRoute routeWithUrl:@&quot;social/new&quot; andAction:^BOOL(id&amp;lt;HSRoutingDelegate&amp;gt; routingDelegate, NSString *url, NSDictionary *parameters) {
    //  handle route, usually by suppying a UIViewController to the routingDelegate
    }];
 
    NSArray *routes = @[newItemRoute]; // could be more routes here too
 
    return routes;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们用路径的方式处理传入的消息通知，在主应用中用相同的scheme去链接每个子应用的切换，比如我们会从Sources或者社交媒体切换到联系人。&lt;/p&gt;

&lt;p&gt;HSRoutingDelegate 有一点小魔力，可以获取当前活跃的导航控制器，我们就可以推送到最上面，或者生成一个基于上下文的路径对象，但是无论如何，这是一个基于block的语法简单的针对JLRoutes封装。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我们可以做什么？&lt;/h2&gt;

&lt;p&gt;长时间的运行，我们希望通过我们简单的Kiwi的测试，一些共享库，编译在KIF测试，一个子应用的每个版本，KIF测试被构建在一个持续集成安装，我们知道每个好的版本，驱动每个主应用的发布。&lt;/p&gt;

&lt;p&gt;我们希望可以通过针对一些共享库的简单的Kiwi测试，子应用的每个版本的KIF测试，通过Kiwi和KIF测试在持续集成中，这样，我们就可以取得每个好的版本，来进行对主应用的每次发布&lt;/p&gt;

&lt;p&gt;从长远来看，我们将增加针对一些共享库的Kiwi测试，建立KIF测试，以便子应用的每个版本都可以在持续集成中进行Kiwi和KIF测试，我们可以选择已知的没有问题的版本进行发布。&lt;/p&gt;

&lt;p&gt;你们是怎么组织多人大型iOS应用开发的？有没有更好的办法，欢迎收到来自你的意见。&lt;/p&gt;
</description>
                <link>http://Qpai.github.io/2014/02/28/%E7%94%A8Cocoapod%E6%A8%A1%E5%9D%97%E5%8C%96%E5%A4%A7%E5%9E%8BiOS%E5%BA%94%E7%94%A8</link>
                <guid>http://Qpai.github.io/2014/02/28/用Cocoapod模块化大型iOS应用</guid>
                <pubDate>2014-02-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Afnetworking 2.0 Tutorial</title>
                <description>

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;meta name=&quot;exporter-version&quot; content=&quot;Evernote Mac 5.4.3 (402231)&quot;/&gt;&lt;meta name=&quot;author&quot; content=&quot;李祎&quot;/&gt;&lt;meta name=&quot;created&quot; content=&quot;2014-02-19 05:57:01 +0000&quot;/&gt;&lt;meta name=&quot;updated&quot; content=&quot;2014-02-21 07:21:47 +0000&quot;/&gt;&lt;title&gt;AFNetworking 2.0 Tutorial（翻译）&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;&quot;&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;&lt;span style=&quot;-evernote-last-insertion-point:true;&quot;/&gt;AFNetworking 2.0 Tutorial&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;a href=&quot;http://www.raywenderlich.com/59255/afnetworking-2-0-tutorial&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在iOS 7中，苹果新引入了NSURLSession，作为网络请求的方法的首选.来替代NSURLConnection这个api。使用新的NSURLSession接口在网络开发中是一个非常有效的方式。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;然而，还有另外一种选择，使用非常流行的第三方框架AFNetworking。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;最新的版本AFNetworking 2.0被构建在NSURLSession上面，所以你可以使用所有NSURLSession提供的很棒的特性。而且你也得到了很多额外的很酷的属性，比如序列化，网络状态的支持，UIKit的扩展(比如方便UIImageView异步加载图片的categry)。等&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;AFNetworking是难以置信的流行--它赢得了读者评选的2012年iOS最佳工具库大奖，它也是使用的最广泛的开源项目之一，在Github上面已经有了超过10000个star,2600个fork,160个构建者。&lt;br/&gt;
在本教程中，我们会通过获取&lt;a href=&quot;http://www.worldweatheronline.com/free-weather-feed.aspx&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;World Weather Online&lt;/a&gt;的数据来构建一个天气app，在这个过程中，会学到AFNetworking 的主要模块。你会从静态天气数据开始，最终获取完整的在线数据。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;今日预测：一个很酷的程序员学习了所有关于AFNetworking 的内容，并且应用于他/她的apps中。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;先在这里下载这个教程用到的项目&lt;a href=&quot;http://cdn1.raywenderlich.com/wp-content/uploads/2014/01/WeatherStarter.zip&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;here&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个项目提供了基本的UI让你开始。还没增加AFNetworking的代码。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;打开MainStoryboard.storyboard，你会看到这三个ViewControllers&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/e36dcd8bf8d5795aac56f9fa8eaf9fec.png&quot; height=&quot;381&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;从左到右分别是：&lt;/p&gt;
&lt;ul style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;顶层导航控制器。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;显示天气列表的视图控制器，一天一行。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;一个自定义的视图控制器，用来在用户点单行cell的时候显示单独一天的天气信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;构建并运行这个项目，你会看到UI出现，但是没有任何工作，因为应用还需要从网络上面得到数据，而你什么代码都没写呢。这就是我们这篇教程正在做的事情。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;首先第一件事，就是在你的项目中引入AFNetworking框架。在&lt;a href=&quot;http://www.github.com/&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;GitHub&lt;/a&gt;上面点击下载链接，下载最新版本的AFNetworking。当我们解压文件，我们会看到一些文件和子文件夹。它包括一个叫AFNetworking的文件夹和一个叫UIKit+AFNetworking的文件夹，如下图所示：&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/3e0ebd4f41e2b70955e7577aefb3d37c.png&quot; height=&quot;500&quot; width=&quot;512&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;拖动这两个文件夹到你的Xcode项目中。&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/288e3dea90d74b6e545fd0588ad72434.png&quot; height=&quot;396&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;增加文件夹的时候会提示一些选项，请确保Copy items into destination group’s folder (if needed) 和 Create groups for any added folders被勾选。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;完成之后，打开你项目中Supporting Files部分下的预编译头Weather-Prefix.pch，在其他导入后面增加下面一行：&lt;br/&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;#import &quot;AFNetworking.h&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在预编译头中导入AFNetworking，意味着框架会自动在所有项目源代码中被引入。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;很简单对吗？？现在我们就开始写天气的代码吧。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Operation JSON&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;AFNetworking在加载和解析从网络上面读取数据的结构方面足够聪明，甚至是老的请求，特别是它支持JSON,XML,Plist。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;你可以下载一些JSON,然后通过一个解析器（比如NSJSONSerialization），自己运行它，但是何必呢，AFNetworking可以把事情全帮你搞定。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/f7452f7377de06004f79a0bbc25cd655.png&quot; height=&quot;194&quot; width=&quot;303&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;首先，你需要一个测试脚本的base url，把它写在WTTableViewController.m最上面，就是所有&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;#import&lt;/code&gt; 行的下面。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;static NSString * const BaseURLString = @&quot;&lt;a href=&quot;http://www.raywenderlich.com/demos/weather_sample/&quot;&gt;http://www.raywenderlich.com/demos/weather_sample/&lt;/a&gt;&quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个地址来自我为这个教程生成的“web service”的接口。如果你想知道它长什么样，你可以从&lt;a href=&quot;http://cdn3.raywenderlich.com/downloads/weather_sample.zip&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个web服务返回了三种不同格式（JSON,XML,Plist）的天气数据，你可以通过下面的url查看返回的数据：&lt;/p&gt;
&lt;ul style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;&lt;a href=&quot;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=json&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=json&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;&lt;a href=&quot;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=xml&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=xml&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;&lt;a href=&quot;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=plist&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=plist&lt;/a&gt; （可能在浏览器上不能正确展示）&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;第一个数据格式，我们用JSON,JSON是一种常用的js对象格式，看起来想下面这样：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;{
    &quot;&lt;span style=&quot;color: teal;&quot;&gt;data&lt;/span&gt;&quot;: {
        &quot;&lt;span style=&quot;color: teal;&quot;&gt;current_condition&lt;/span&gt;&quot;: [
            {
                &quot;&lt;span style=&quot;color: teal;&quot;&gt;cloudcover&lt;/span&gt;&quot;: &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;16&quot;&lt;/span&gt;,
                &quot;&lt;span style=&quot;color: teal;&quot;&gt;humidity&lt;/span&gt;&quot;: &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;59&quot;&lt;/span&gt;,
                &quot;&lt;span style=&quot;color: teal;&quot;&gt;observation_time&lt;/span&gt;&quot;: &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;09:09 PM&quot;&lt;/span&gt;,
            }
        ]
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;如果你想更深入研究JSON,请学习我们的这篇文章&lt;a href=&quot;http://www.raywenderlich.com/5492/working-with-json-in-ios-5&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;Working with JSON Tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当用户点击JSON按钮，应用就会从服务器上面加载处理JSON数据。在WTTableViewController.m里，找到jsonTapped:(应该是空方法)，用下面的代码替换它：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)jsonTapped:(id)sender
{
    &lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;1&lt;/span&gt;
    NSString &lt;span style=&quot;color: teal;&quot;&gt;*string&lt;/span&gt; = [NSString stringWithFormat:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%@&lt;/span&gt;weather.php?&lt;span style=&quot;font-weight: 700;&quot;&gt;format&lt;/span&gt;=json&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;, BaseURLString];
    NSURL &lt;span style=&quot;color: teal;&quot;&gt;*url&lt;/span&gt; = [NSURL URLWithString:string];
    NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt; = [NSURLRequest requestWithURL:url];

    // 2
    AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt; = [[AFHTTPRequestOperation alloc] initWithRequest:request];
    operation.responseSerializer = [AFJSONResponseSerializer serializer];

    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, id responseObject) {

        // 3
        self.weather = (NSDictionary &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;responseObject;
        self.title = &lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;JSON Retrieved&quot;&lt;/span&gt;;
        [self.tableView reloadData];

    } failure:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt;) {

        &lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;4&lt;/span&gt;
        UIAlertView &lt;span style=&quot;color: teal;&quot;&gt;*alertView&lt;/span&gt; = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Error Retrieving Weather&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;
                                                            message:[error localizedDescription]
                                                           delegate:nil
                                                  cancelButtonTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Ok&quot;&lt;/span&gt;
                                                  otherButtonTitles:nil];
        [alertView show];
    }];

    &lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;5&lt;/span&gt;
    [operation start];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;太帅了，这就是你的第一个AFNetworking 的代码。由于这是全新的代码，所以我会解释一下。&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;首先，你通过base url 生成了完整的url地址，这通常是生成一个NSURL 对象，然后用来生成NSURLRequest。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;AFHTTPRequestOperation是一个处理http转换到网络的一体化的类，你通过设置解析器为json解析器来告诉系统按照json的方式来解析反馈的数据。AFNetworking会帮你解析json数据。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;当请求成功之后，success的block将会被调用。JSON序列化工具将会把返回的数据中的responseObject解析为NSDictory。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;如果请求失败，错误的block将会被调用。比如没有网络的情况。你可以显示一个有错误信息的提示。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;你必须明确的告诉opertion执行start，否则什么都不会发生。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;正如你看到的，AFNetworking使用起来极其简单。只需几行代码，就可以生成一个网络opertion，包括下载和解析。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在天气数据被保存在了self.weather中，你需要显示它。找到tableView:numberOfRowsInSection:方法，并用下面代码替换它：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt;(!&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.weather)
        &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;;

    &lt;span style=&quot;font-weight: 700;&quot;&gt;switch&lt;/span&gt; (section) {
        &lt;span style=&quot;font-weight: 700;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;: {
            &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;1&lt;/span&gt;;
        }
        &lt;span style=&quot;font-weight: 700;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;1&lt;/span&gt;: {
            NSArray *upcomingWeather = [&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.weather upcomingWeather];
            &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; [upcomingWeather count];
        }
        &lt;span style=&quot;font-weight: 700;&quot;&gt;default&lt;/span&gt;:
            &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个表单视图被分为了两部分，上面显示当前天气，下面显示未来天气。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;“等等”，你可能会想，&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;[self.weather upcomingWeather]&lt;/code&gt;是什么东西？如果&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;self.weather&lt;/code&gt;是单纯的字典，那它怎么知道upcomingWeather是什么？&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;为了更简单的显示数据，我给NSDictory增加了一些工具categry。&lt;/p&gt;
&lt;ul style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;NSDictionary+weather&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;NSDictionary+weather_package&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这些categry 增加了一些方法为了更简单的获取数据的成员。这让你只需关注网络开发，而非字典键值，对吗？&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;注意：仅供参考，如果你也想实现上面的事情，或者自己实现一个categry，或者使用JSONModel。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;还是在WTTableViewController.m，找到tableView:cellForRowAtIndexPath方法，用下面代码替换：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;static&lt;/span&gt; NSString *CellIdentifier = @&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;WeatherCell&quot;&lt;/span&gt;;
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];

    NSDictionary *daysWeather = nil;

    &lt;span style=&quot;font-weight: 700;&quot;&gt;switch&lt;/span&gt; (indexPath.section) {
        &lt;span style=&quot;font-weight: 700;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;: {
            daysWeather = [&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.weather currentCondition];
            &lt;span style=&quot;font-weight: 700;&quot;&gt;break&lt;/span&gt;;
        }

        &lt;span style=&quot;font-weight: 700;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;1&lt;/span&gt;: {
            NSArray *upcomingWeather = [&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.weather upcomingWeather];
            daysWeather = upcomingWeather[indexPath.row];
            &lt;span style=&quot;font-weight: 700;&quot;&gt;break&lt;/span&gt;;
        }

        &lt;span style=&quot;font-weight: 700;&quot;&gt;default&lt;/span&gt;:
            &lt;span style=&quot;font-weight: 700;&quot;&gt;break&lt;/span&gt;;
    }

    cell.textLabel.text = [daysWeather weatherDescription];

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// You will add code here later to customize the cell, but it&#39;s good for now.&lt;/span&gt;

    &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; cell;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;就像在tableView:numberOfRowsInSection:中，NSDictory的categry很简单的获取了数据，当前天是字典，未来天气数据是array。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;编译运行你的项目，点击json按钮，请求网络之后，你会看到下面这样：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/25ed2a82a8463f8c9efee4aadf63cdb4.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;JSON成功了！&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Operation Property Lists&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;属性列表（或者叫plist）其实就是以一定方式的XML的结构，由苹果定义。苹果把它用于所有类似于用户设置的地方，结构像下面这样：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;dict]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
  &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;data&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
  &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;dict]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
    &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;current_condition&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
      &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;array]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
      &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;dict]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
        &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;cloudcover&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
        &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;string]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;16&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/string]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
        &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;humidity&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/key]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
        &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;string]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;59&lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;/string]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;
        ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;上面的表现如下：&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;一个字典以“data”为Key，包含其他字典。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;array由一个叫“current_condition”的字典包含。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;array包含一些键值对，比如cloudcover=16 and humidity=59。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;到时候加载plist版本的天气数据了。找到plistTapped:方法，用下面的代码替换空的实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)plistTapped:(id)sender 
{
    NSString &lt;span style=&quot;color: teal;&quot;&gt;*string&lt;/span&gt; = [NSString stringWithFormat:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%@&lt;/span&gt;weather.php?&lt;span style=&quot;font-weight: 700;&quot;&gt;format&lt;/span&gt;=plist&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;, BaseURLString];
    NSURL &lt;span style=&quot;color: teal;&quot;&gt;*url&lt;/span&gt; = [NSURL URLWithString:string];
    NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt; = [NSURLRequest requestWithURL:url];

    AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt; = [[AFHTTPRequestOperation alloc] initWithRequest:request];

    // Make sure to set the responseSerializer correctly
    operation.responseSerializer = [AFPropertyListResponseSerializer serializer];

    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, id responseObject) {

        self.weather = (NSDictionary &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;responseObject;
        self.title = &lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;PLIST Retrieved&quot;&lt;/span&gt;;
        [self.tableView reloadData];

    } failure:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt;) {

        UIAlertView &lt;span style=&quot;color: teal;&quot;&gt;*alertView&lt;/span&gt; = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Error Retrieving Weather&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;
                                                            message:[error localizedDescription]
                                                           delegate:nil
                                                  cancelButtonTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Ok&quot;&lt;/span&gt;
                                                  otherButtonTitles:nil];
        [alertView show];
    }];

    [operation start];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;注意：上面的代码几乎跟json版本的代码一样，除了要把responseSerializer设置为AFPropertyListResponseSerializer，让程序知道，将要解析一个plist数据。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;相当棒的是：你的代码可以支持json或plist，只需改变一丁点的代码就可以实现。编译和运行你的项目，常识点击plist按钮，会出现下面的界面： &lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/28117969bbb37fd3610066f9563d9ae0.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;顶部导航上的clear按钮会清除标题和列表数据，所以你可以重置数据来确保请求正在进行。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Operation XML&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;AFNetworking已经帮你解析了json和plist了，解析XML可能会有点复杂。这次你的工作是从XML流中找到天气数据的字典。幸运的是，iOS凭借NSXMLParser 类提供了一些帮助。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;还是在WTTableViewController.m，找到XMLTap:方法，用下面代码进行替换实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)xmlTapped:(id)sender
{
    NSString &lt;span style=&quot;color: teal;&quot;&gt;*string&lt;/span&gt; = [NSString stringWithFormat:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%@&lt;/span&gt;weather.php?&lt;span style=&quot;font-weight: 700;&quot;&gt;format&lt;/span&gt;=xml&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;, BaseURLString];
    NSURL &lt;span style=&quot;color: teal;&quot;&gt;*url&lt;/span&gt; = [NSURL URLWithString:string];
    NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt; = [NSURLRequest requestWithURL:url];

    AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt; = [[AFHTTPRequestOperation alloc] initWithRequest:request];

    // Make sure to set the responseSerializer correctly
    operation.responseSerializer = [AFXMLParserResponseSerializer serializer];

    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, id responseObject) {

        NSXMLParser &lt;span style=&quot;color: teal;&quot;&gt;*XMLParser&lt;/span&gt; = (NSXMLParser &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;responseObject;
        [XMLParser setShouldProcessNamespaces:YES];

        // Leave these commented for now (you first need to add the delegate methods)
        // XMLParser.delegate = self;
        // [XMLParser parse];

    } failure:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt;) {

        UIAlertView &lt;span style=&quot;color: teal;&quot;&gt;*alertView&lt;/span&gt; = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Error Retrieving Weather&quot;&lt;/span&gt;
                                                            message:[error localizedDescription]
                                                           delegate:nil
                                                  cancelButtonTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Ok&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;
                                                  otherButtonTitles:nil];
        [alertView show];

    }];

    [operation start];
}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;代码看上去跟之前也很像，最大的变化就是在成功的block中，你不能很轻松的解析出NSDictory来。&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;responseObject&lt;/code&gt;是一个&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;NSXMLParser&lt;/code&gt;的实例。你会用它来完成繁重的XML解析任务。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;你需要一个对&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;NXMLParser&lt;/code&gt;的代理进行设置才能解析XML,注意NXMLParser的代理设置为self。你增在WTTableViewController中增加NXMLParser的代理方法来解析XML.&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;首先，改变WTTableViewController.h 的类声明，像下面这样：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@interface WTTableViewController : UITableViewController&amp;lt;NSXMLParserDelegate&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这意味着类必须实现NSXMLParserDelegate的协议。你将会实现这些方法，但是在此之前，先增加几个属性。增加如下属性在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTTableViewController.m&lt;/code&gt;的类的扩展中，就是&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@interface WTTableViewController () :&lt;/code&gt;下面。&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;&lt;span style=&quot;color: teal;&quot;&gt;@property&lt;/span&gt;(nonatomic, strong) NSMutableDictionary &lt;span style=&quot;color: teal;&quot;&gt;*currentDictionary&lt;/span&gt;;   &lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//&lt;/span&gt; current section being parsed
&lt;span style=&quot;color: teal;&quot;&gt;@property&lt;/span&gt;(nonatomic, strong) NSMutableDictionary &lt;span style=&quot;color: teal;&quot;&gt;*xmlWeather&lt;/span&gt;;          &lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//&lt;/span&gt; completed parsed xml response
&lt;span style=&quot;color: teal;&quot;&gt;@property&lt;/span&gt;(nonatomic, strong) NSString &lt;span style=&quot;color: teal;&quot;&gt;*elementName&lt;/span&gt;;
&lt;span style=&quot;color: teal;&quot;&gt;@property&lt;/span&gt;(nonatomic, strong) NSMutableString &lt;span style=&quot;color: teal;&quot;&gt;*outstring&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这些属性会在解析XML的时候用到。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在复制代码到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTTableViewController.m&lt;/code&gt;中，就是&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@end&lt;/code&gt;上面。&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (&lt;span style=&quot;font-weight: 700;&quot;&gt;void&lt;/span&gt;)parserDidStartDocument:(NSXMLParser *)parser
{
    self.xmlWeather = [NSMutableDictionary dictionary];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;解析器调用这个方法在解析刚开始的时候，在这个方法里，给xmlWeather设置一个新的字典来持有XML数据。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;然后复制下面的代码到上一段代码后面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (void)parser:(NSXMLParser &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;parser didStartElement:(NSString &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;elementName namespaceURI:(NSString &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;namespaceURI qualifiedName:(NSString &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;qName attributes:(NSDictionary &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;attributeDict
{
    self.elementName = qName;

    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt;([qName isEqualToString:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;current_condition&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;] ||
       [qName isEqualToString:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;weather&quot;&lt;/span&gt;] ||
       [qName isEqualToString:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;request&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;]) {
        self.currentDictionary = [NSMutableDictionary dictionary];
    }

    self.outstring = [NSMutableString string];
}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当解析器发现一个新的节点的开始标签的时候，会调用上面的方法。当被调用的时候，你把这个节点的名字赋值给&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;self.elementName&lt;/code&gt;，如果这个节点是一个天气数据的开始，那么就给&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;self.currentDictionary&lt;/code&gt;设置一个新的字典，最后，重置&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;self.outstring&lt;/code&gt;，为接收相关联的节点做准备。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;复制下面的代码到上一段代码后面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (&lt;span style=&quot;font-weight: 700;&quot;&gt;void&lt;/span&gt;)parser:(NSXMLParser *)parser foundCharacters:(NSString *)&lt;span style=&quot;font-weight: 700;&quot;&gt;string&lt;/span&gt;
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (!self.elementName)
        &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt;;

    [self.outstring appendFormat:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, &lt;span style=&quot;font-weight: 700;&quot;&gt;string&lt;/span&gt;];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;正如名字按时的，解析器调用这个方法，会在XML节点中找到字符串，你会增加新的字符串在outstring中，所以XML可以被解析，知道XML标签结束。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;复制下面代码到上一段代码之后&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName
{
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 1&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; ([qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;current_condition&quot;&lt;/span&gt;] ||
       [qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;request&quot;&lt;/span&gt;]) {
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.xmlWeather[qName] = @[&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary];
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary = nil;
    }
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 2&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; ([qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;weather&quot;&lt;/span&gt;]) {

        &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Initialize the list of weather items if it doesn&#39;t exist&lt;/span&gt;
        NSMutableArray *&lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt; = &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.xmlWeather[@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;weather&quot;&lt;/span&gt;] ?: [NSMutableArray &lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt;];

        &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Add the current weather object&lt;/span&gt;
        [&lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt; addObject:&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary];

        &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Set the new array to the &quot;weather&quot; key on xmlWeather dictionary&lt;/span&gt;
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.xmlWeather[@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;weather&quot;&lt;/span&gt;] = &lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt;;

        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary = nil;
    }
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 3&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; ([qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;value&quot;&lt;/span&gt;]) {
        &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Ignore value tags, they only appear in the two conditions below&lt;/span&gt;
    }
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 4&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; ([qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;weatherDesc&quot;&lt;/span&gt;] ||
            [qName isEqualToString:@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;weatherIconUrl&quot;&lt;/span&gt;]) {
        NSDictionary *dictionary = @{@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.outstring};
        NSArray *&lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt; = @[dictionary];
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary[qName] = &lt;span style=&quot;font-weight: 700;&quot;&gt;array&lt;/span&gt;;
    }
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 5&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (qName) {
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.currentDictionary[qName] = &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.outstring;
    }

    &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.elementName = nil;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当你发现一个节点的结束标签时调用上面的方法，你可以在里面检查一些特殊标签：&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;这个&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;current_condition&lt;/code&gt;节点包含了当天的天气数据，你可以直接把他们加入xmlWeather字典中。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;这个&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;weather&lt;/code&gt;节点包含了随后的天气数据，天气数据只会包含一个当前天，可能会有几个未来天气，你需要把未来天气增加到array中。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;value&lt;/code&gt;标签不用处理，直接跳过。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;weatherDesc&lt;/code&gt;和&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;weatherIconUrl&lt;/code&gt;节点在被保存之前需要被包含在一个array中，这个方法跟处理json和plist基本一样。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;其他节点都像这样被保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在是最后一个代理方法了，把它复制到上一段后面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (void) &lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;parserDidEndDocument:&lt;/span&gt;(NSXMLParser *)parser
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.weather = @{@&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.xmlWeather};
    &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.title = @&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;XML Retrieved&quot;&lt;/span&gt;;
    [&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.tableView reloadData];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当到了整个xml最后的时候，解析器调用这个方法。这时，xml就被完全解析完成，我们就可以加载列表数据了。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;xmlWeather被其他的字典包含可能有点多余，但是这样格式就跟json和plist相匹配了，用完全相同的代码就可以显示三种格式的数据了。 &lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/eb2ec04d53543f9cd8e0a9c475e00d6b.png&quot; height=&quot;299&quot; width=&quot;480&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在代理方法就都有了，回调&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;xmlTapped:&lt;/code&gt;方法，解开注释的那几行，运行你的项目，会看到： &lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/cc80d478830a447d222977358de17716.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;A Little Weather Flair&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这看起来有点枯燥，如果有几天是下雨，我们怎么才能在列表中多加入一些信息呢？ 另外，在&lt;a href=&quot;http://www.raywenderlich.com/demos/weather_sample/weather.php?format=json&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;JSON format from before&lt;/a&gt;中，我们发现在每个天气中有一些图片地址，如果显示天气图片可能会让我们的app看起来更有趣一些。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;AFNetworking 为 UIImageView增加了一个categry，让你可以异步加载图片。意味着UI会在图片后台下载的过程中保持响应。为了使用这个优势，在WTTableViewController.m中引入categry。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;#import &quot;UIImageView+AFNetworking.h&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;方法，并且把下面代码复制到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;return cell;&lt;/code&gt;之前（应该有一个注释标记点）。&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;cell.textLabel.text = [daysWeather weatherDescription];

    NSURL &lt;span style=&quot;color: teal;&quot;&gt;*url&lt;/span&gt; = [NSURL URLWithString:daysWeather.weatherIconURL];
    NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt; = [NSURLRequest requestWithURL:url];
    UIImage &lt;span style=&quot;color: teal;&quot;&gt;*placeholderImage&lt;/span&gt; = [UIImage imageNamed:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;placeholder&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;];

    __weak UITableViewCell &lt;span style=&quot;color: teal;&quot;&gt;*weakCell&lt;/span&gt; = cell;

    [cell.imageView setImageWithURLRequest:request
                          placeholderImage:placeholderImage
                                   success:^(NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt;, NSHTTPURLResponse &lt;span style=&quot;color: teal;&quot;&gt;*response&lt;/span&gt;, UIImage &lt;span style=&quot;color: teal;&quot;&gt;*image&lt;/span&gt;) {

                                       weakCell.imageView.image = image;
                                       [weakCell setNeedsLayout];

                                   } failure:nil];&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;UIImageView+AFNetworking让&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;setImageWithURLRequest:&lt;/code&gt;和一些其他方法都对你可用。成功和失败的block是可选的。如果你实现了成功的block，你就必须把image 设置给imageView的image属性，否则它不会自动设置。如果你没有实现成功的block，那么就会帮你自动设置。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当cell第一次生成的时候，imageView会显示占位图片，直到真正的图片被下载下来为止。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在运行你的项目，点击你已经增加的任何操作，你会看到如下：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/6ac20cd521dc366b48e10cc2fc2b8e85.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;太棒了，异步加载图片是前所未有的简单。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;A RESTful Class&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;迄今为止，我们已经用AFHTTPRequestOperation生成了一次性的网络请求。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;或者，AFHTTPRequestOperationManager 和 AFHTTPSessionManager被设计为帮助用户与单个的，网络节点交互起来更简单。这两个都可以设置一个base url，然后向网络节点做一些请求。他们都可以监控网络变化，编码参数，处理多线程请求，批处理队列操作，执行完整的一套基于restful的命令（GET, POST, PUT, and DELETE）。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;“我到底该用哪个？”你可能会问？&lt;/p&gt;
&lt;ul style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;如果是iOS7 或者以上，你可以用AFHTTPSessionManager，本质上，它是基于NSURLSession和相关对象的。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;如果是iOS6，你可以用AFHTTPRequestOperationManager，它和AFHTTPSessionManager有相同的功能。只是它是基于NSURLConnection，而不是NSURLSession（iOS6没有这个类），其他方面，功能上都差不多。&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在你的天气项目中，你需要使用AFHTTPSessionManager来执行GET,POST的任务。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;注意：不懂什么是（GET,POST,DELETE,PUT）你可以查看这个分类的解释--&lt;a href=&quot;http://rest.elkstein.org/2008/02/what-is-rest.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;什么是restful&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;更新WTTableViewController.h 中类的声明：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@interface WTTableViewController : UITableViewController&amp;lt;NSXMLParserDelegate, CLLocationManagerDelegate, UIActionSheetDelegate&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTTableViewController.m&lt;/code&gt;中，找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;clientTapped:&lt;/code&gt;方法，用下面代码替换实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)clientTapped:(id)sender 
{
    UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;AFHTTPSessionManager&quot;&lt;/span&gt;
                                                             &lt;span style=&quot;font-weight: 700;&quot;&gt;delegate&lt;/span&gt;:self
                                                    cancelButtonTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;Cancel&quot;&lt;/span&gt;
                                               destructiveButtonTitle:nil
                                                    otherButtonTitles:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;HTTP GET&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;HTTP POST&quot;&lt;/span&gt;, nil];
    [actionSheet showFromBarButtonItem:sender animated:YES];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个方法生成和显示了一个UIActionSheet，用来让用户选择是GET 还是POST请求。在类的实现结尾（就是&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@end&lt;/code&gt;上面）增加下面的这个UIActionSheetDelegate的实现方法。&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (&lt;span style=&quot;font-weight: 700;&quot;&gt;void&lt;/span&gt;)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (buttonIndex == [actionSheet cancelButtonIndex]) {
        &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// User pressed cancel -- abort&lt;/span&gt;
        &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 1&lt;/span&gt;
    NSURL *baseURL = [NSURL URLWithString:BaseURLString];
    NSDictionary *parameters = @{&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;format&quot;&lt;/span&gt;: &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;json&quot;&lt;/span&gt;};

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 2&lt;/span&gt;
    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:baseURL];
    manager.responseSerializer = [AFJSONResponseSerializer serializer];

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 3&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (buttonIndex == &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;) {
        [manager GET:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;weather.php&quot;&lt;/span&gt; parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
            self.weather = responseObject;
            self.title = &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;HTTP GET&quot;&lt;/span&gt;;
            [self.tableView reloadData];
        } failure:^(NSURLSessionDataTask *task, NSError *error) {
            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;Error Retrieving Weather&quot;&lt;/span&gt;
                                                                message:[error localizedDescription]
                                                               &lt;span style=&quot;font-weight: 700;&quot;&gt;delegate&lt;/span&gt;:nil
                                                      cancelButtonTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;Ok&quot;&lt;/span&gt;
                                                      otherButtonTitles:nil];
            [alertView show];
        }];
    }

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// 4&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (buttonIndex == &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;1&lt;/span&gt;) {
        [manager POST:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;weather.php&quot;&lt;/span&gt; parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
            self.weather = responseObject;
            self.title = &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;HTTP POST&quot;&lt;/span&gt;;
            [self.tableView reloadData];
        } failure:^(NSURLSessionDataTask *task, NSError *error) {
            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;Error Retrieving Weather&quot;&lt;/span&gt;
                                                                message:[error localizedDescription]
                                                               &lt;span style=&quot;font-weight: 700;&quot;&gt;delegate&lt;/span&gt;:nil
                                                      cancelButtonTitle:&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;Ok&quot;&lt;/span&gt;
                                                      otherButtonTitles:nil];
            [alertView show];
        }];
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;上面的代码做了这些事情：&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;先设置了base url和参数的字典。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;生成了一个AFHTTPSessionManager实例，设置它的反馈解析器为JSON，跟之前JSON的例子一样。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;如果用户点击了HTTP GET的按钮，那么你就会用manager执行GET方法，传输参数，并实现成功和失败的block。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;POST版本的代码跟上面一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在这个例子里面，你请求JSON数据，你也可以很轻松的获得其他两种格式的数据，就想我们之前讨论的。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;编译执行你的项目，点击app上面的clent按钮，分别选择HTTP GET和HTTP POST按钮，执行相应的任务。你可以看到下面的界面：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/75cfbee09f9a75470b1fb35414557f95.png&quot; height=&quot;378&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;从这里，你可以了解使用AFHTTPSessionManager的基本方式。当然你可以知道更简洁的办法去获取请求，接下来我们会讲到。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;World Weather Online&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在你使用正式服务之前，你得先去&lt;a href=&quot;http://developer.worldweatheronline.com/member/register&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt; World Weather Online&lt;/a&gt;注册一个账号，别担心，很快很简单。你注册之后，会收到一封确认邮件。你可以在账号页面上面找到一个请求时需要的api key，让我们带着key继续,你很快会用到的。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Hooking into the Live Service&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;到目前为止，我们已经在列表视图控制器上面创建了 AFHTTPRequestOperation 和 AFHTTPSessionManager ，更多的时候，你的网络请求会有一个单个的web接口生成。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;AFHTTPSessionManager可以帮你做请求API的所有事情。它可以把网络交互代码从其他代码中解耦出来，使其应用于项目的其他部分中。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这里有两个针对AFHTTPSessionManager的最佳实践：&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;给每个web服务生成一个单独子类。如果你要写一个社交聚合器，那么你可能需要为Twitter写一个类，为Facebook写一个，为Instragram写一个，等等。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;在每个AFHTTPSessionManager子类中，生成一个静态方法，返回一个实例，它用来保存资源，而不是每次都生成一个新的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;如果你的项目没有这个AFHTTPSessionManager的子类，那么生成一个解决它。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;我们先在你的项目中创建一个新的Objective-c类型的类，叫WeatherHTTPClient，是AFHTTPSessionManager的子类。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个类做三件事：执行HTTP请求，当天气数据返回的时候，处理代理的回调，用用户的当前位置，获得正确的天气数据。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;用下面的代码替换WeatherHTTPClient.h的内容：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;#import &quot;AFHTTPSessionManager.h&quot;&lt;/span&gt;

&lt;span style=&quot;color: teal;&quot;&gt;@protocol&lt;/span&gt; WeatherHTTPClientDelegate;

&lt;span style=&quot;color: teal;&quot;&gt;@interface&lt;/span&gt; WeatherHTTPClient : AFHTTPSessionManager
&lt;span style=&quot;color: teal;&quot;&gt;@property&lt;/span&gt; (nonatomic, weak) id&amp;lt;WeatherHTTPClientDelegate&gt;delegate;

+ (WeatherHTTPClient &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;sharedWeatherHTTPClient;
- (instancetype)initWithBaseURL:(NSURL &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;url;
- (void)updateWeatherAtLocation:(CLLocation &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;location forNumberOfDays:(NSUInteger)number;

&lt;span style=&quot;color: teal;&quot;&gt;@end&lt;/span&gt;

&lt;span style=&quot;color: teal;&quot;&gt;@protocol&lt;/span&gt; WeatherHTTPClientDelegate &amp;lt;NSObject&gt;
&lt;span style=&quot;color: teal;&quot;&gt;@optional&lt;/span&gt;
-(void)weatherHTTPClient:(WeatherHTTPClient &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;client didUpdateWithWeather:(id)weather;
-(void)weatherHTTPClient:(WeatherHTTPClient &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;client didFailWithError:(NSError &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;error;
&lt;span style=&quot;color: teal;&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;你将会学习每个方法的实现，改变WeatherHTTPClient.m，把下面内容增加到import下面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Set this to your World Weather Online API Key&lt;/span&gt;
&lt;span style=&quot;font-weight: 700;&quot;&gt;static&lt;/span&gt; NSString * &lt;span style=&quot;font-weight: 700;&quot;&gt;const&lt;/span&gt; WorldWeatherOnlineAPIKey = &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;PASTE YOUR API KEY HERE&quot;&lt;/span&gt;;

&lt;span style=&quot;font-weight: 700;&quot;&gt;static&lt;/span&gt; NSString * &lt;span style=&quot;font-weight: 700;&quot;&gt;const&lt;/span&gt; WorldWeatherOnlineURLString = &lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;@&quot;&lt;a href=&quot;http://api.worldweatheronline.com/free/v1/&quot;&gt;http://api.worldweatheronline.com/free/v1/&lt;/a&gt;&quot;&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;一定要确保把&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@&quot;PASTE YOUR API KEY HERE&quot;&lt;/code&gt;替换成你刚获得的Api Key，然后把下面的代码复制到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@implementation&lt;/code&gt;这一行下面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;+ (WeatherHTTPClient *)sharedWeatherHTTPClient
{
    static WeatherHTTPClient *_sharedWeatherHTTPClient = &lt;span style=&quot;font-weight: 700;&quot;&gt;nil&lt;/span&gt;;

    static dispatch_once_t onceToken;
    dispatch_once(&amp;amp;onceToken, ^{
        _sharedWeatherHTTPClient = [[&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt; alloc] &lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;initWithBaseURL:&lt;/span&gt;[NSURL URLWithString&lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;:WorldWeatherOnlineURLString&lt;/span&gt;]];
    });

    &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; _sharedWeatherHTTPClient;
}

- (instancetype)&lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;initWithBaseURL:&lt;/span&gt;(NSURL *)url
{
    &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt; = [&lt;span style=&quot;font-weight: 700;&quot;&gt;super&lt;/span&gt; &lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;initWithBaseURL:&lt;/span&gt;url];

    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;) {
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.responseSerializer = [AFJSONResponseSerializer serializer];
        &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.requestSerializer = [AFJSONRequestSerializer serializer];
    }

    &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;sharedWeatherHTTPClient这个方法用GCD的方式确保了单例模式生成的实例只被创建一次，你用base url 创建了这个对象，并且设置将要从web服务获取到的response为JSON格式。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;复制下面的代码，复制到上一段代码下面：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (void)updateWeatherAtLocation:(CLLocation &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;location forNumberOfDays:(NSUInteger)number
{
    NSMutableDictionary &lt;span style=&quot;color: teal;&quot;&gt;*parameters&lt;/span&gt; = [NSMutableDictionary dictionary];

    parameters[&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;num_of_days&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;] = &lt;span style=&quot;color: teal;&quot;&gt;@(&lt;/span&gt;number);
    parameters[&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;q&quot;&lt;/span&gt;] = [NSString stringWithFormat:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%f&lt;/span&gt;,&lt;span style=&quot;color: teal;&quot;&gt;%f&lt;/span&gt;&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;,location.coordinate.latitude,location.coordinate.longitude];
    parameters[&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;format&quot;&lt;/span&gt;] = &lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;json&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;;
    parameters[&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;key&quot;&lt;/span&gt;] = WorldWeatherOnlineAPIKey;

    [self GET:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;weather.ashx&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot; parameters:parameters success:^(NSURLSessionDataTask &lt;span style=&quot;color: teal;&quot;&gt;*task&lt;/span&gt;, id responseObject) {
        if ([self.delegate respondsToSelector:&lt;span style=&quot;color: teal;&quot;&gt;@selector&lt;/span&gt;(weatherHTTPClient:didUpdateWithWeather:)]) {
            [self.delegate weatherHTTPClient:self didUpdateWithWeather:responseObject];
        }
    } failure:^(NSURLSessionDataTask &lt;span style=&quot;color: teal;&quot;&gt;*task&lt;/span&gt;, NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt;) {
        if ([self.delegate respondsToSelector:&lt;span style=&quot;color: teal;&quot;&gt;@selector&lt;/span&gt;(weatherHTTPClient:didFailWithError:)]) {
            [self.delegate weatherHTTPClient:self didFailWithError:error];
        }
    }];
}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个方法为特殊的地理位置获得相应的天气数据。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;自从这个对象加载了天气数据，就得有一些方法把数据传递给那些数据其感兴趣的对象。感谢WeatherHTTPClientDelegate协议，和它的代理方法，成功和失败的block就可以通知一个控制器，和地理位置相关的天气数据已经被更新了，用这种方式，控制器就可以更新成它想显示的东西。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;到时候写出最后的代码了，WeatherHTTPClient为了获得一个地理位置，需要定义一个代理协议，所以你需要更新WTTableViewController。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;打开&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTTableViewController.h&lt;/code&gt;，你需要增加一个导入，用下面的代码替换&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@interface&lt;/code&gt;的声明：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;#import &quot;WeatherHTTPClient.h&quot;

@interface WTTableViewController : UITableViewController &lt;span style=&quot;color: navy;&quot;&gt;&amp;lt;NSXMLParserDelegate, &lt;span style=&quot;color: teal;&quot;&gt;CLLocationManagerDelegate&lt;/span&gt;, &lt;span style=&quot;color: teal;&quot;&gt;UIActionSheetDelegate&lt;/span&gt;, &lt;span style=&quot;color: teal;&quot;&gt;WeatherHTTPClientDelegate&lt;/span&gt;]]
&lt;![CDATA[&gt;]]&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;增加一个新的Core Location manager属性：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;@property (nonatomic, strong) CLLocationManager *locationManager;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTTableViewController.m&lt;/code&gt;，从&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;viewDidLoad:&lt;/code&gt;最下面增加下面几行：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.locationManager = [[CLLocationManager alloc] init];
&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.locationManager.delegate = &lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这几行在创建了Core Location manager，并且在视图加载的时候，获取地理位置。 Core Location manager通过代理回调来报告地理位置信息。下面是方法实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (&lt;span style=&quot;font-weight: 700;&quot;&gt;void&lt;/span&gt;)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations
{
    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// Last object contains the most recent location&lt;/span&gt;
    CLLocation *newLocation = [locations lastObject];

    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;// If the location is more than 5 minutes old, ignore it&lt;/span&gt;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;if&lt;/span&gt;([newLocation.timestamp timeIntervalSinceNow] &gt; &lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;300&lt;/span&gt;)
        &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt;;

    [self.locationManager stopUpdatingLocation];

    WeatherHTTPClient *client = [WeatherHTTPClient sharedWeatherHTTPClient];
    client.&lt;span style=&quot;font-weight: 700;&quot;&gt;delegate&lt;/span&gt; = self;
    [client updateWeatherAtLocation:newLocation forNumberOfDays:&lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;5&lt;/span&gt;];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当用户的位置有变化的时候，你就能调用WeatherHTTPClient 的单例方法，通过这个地理位置来请求天气数据了。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;WeatherHTTPClient有两个代理方法，需要你来实现，增加下面两个方法的实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (void)weatherHTTPClient:(WeatherHTTPClient &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;client didUpdateWithWeather:(id)weather
{
    self.weather = weather;
    self.title = &lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;API Updated&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;;
    [self.tableView reloadData];
}

- (void)weatherHTTPClient:(WeatherHTTPClient &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;client didFailWithError:(NSError &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;error
{
    UIAlertView &lt;span style=&quot;color: teal;&quot;&gt;*alertView&lt;/span&gt; = [[UIAlertView alloc] initWithTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Error Retrieving Weather&quot;&lt;/span&gt;
                                                        message:[NSString stringWithFormat:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%@&lt;/span&gt;&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;,error]
                                                       delegate:nil
                                              cancelButtonTitle:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;OK&quot;&lt;/span&gt; otherButtonTitles:nil];
    [alertView show];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当WeatherHTTPClient请求成功，你可以更新天气数据，重新载入列表视图。如果网络错误，那显示错误信息。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;apiTapped:&lt;/code&gt;方法，用下面代码替换其实现：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)&lt;span style=&quot;color: rgb(153, 0, 115);&quot;&gt;apiTapped:&lt;/span&gt;(id)sender
{
    [&lt;span style=&quot;font-weight: 700;&quot;&gt;self&lt;/span&gt;.locationManager startUpdatingLocation];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;编译运行你的项目（如果模拟器有问题的话，尝试用你的设备）点击API按钮，创建WeatherHTTPClient请求，你将会看到一下界面：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/6d4e1b228423d89fba99735eab79f79a.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;希望你未来的天气是晴天，就像我这里一样。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;I’m Not Dead Yet!&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;你可能注意到一段时间之后数据才会返回，在进行网络请求的时候，给用户一些反馈是很重要的，让他们知道app并没有挂掉。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/5573107c18bb3f88b1de4ff08ff8ada6.png&quot; height=&quot;177&quot; width=&quot;480&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;幸运的是AFNetworking 提供了一个非常简单的办法来提供这个反馈：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;AFNetworkActivityIndicatorManager&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WTAppDelegate.m&lt;/code&gt;中增加一个新的导入文件：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;#import &quot;AFNetworkActivityIndicatorManager.h&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;然后找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt;这个方法用下面的代码替换：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (BOOL)application:(UIApplication &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;application didFinishLaunchingWithOptions:(NSDictionary &lt;span style=&quot;color: teal;&quot;&gt;*)&lt;/span&gt;launchOptions
{
    [AFNetworkActivityIndicatorManager sharedManager].enabled = YES;
    &lt;span style=&quot;font-weight: 700;&quot;&gt;return&lt;/span&gt; YES;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;当后台有网络请求的时候，sharedManager讲自动显示网络活动显示器，你不需要分别为每个请求去处理它。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;编译运行你的项目，如果有网络请求的时候，你会看到在状态栏上面，有一个小的网络菊花（这么翻译会不会太恶俗了:)）。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/c7b842d738a7ec0e1999958bf0224fde.png&quot; height=&quot;35&quot; width=&quot;330&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;现在当app等待一个缓慢的网络服务的时候，你给用户提供了一个生命迹象。&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Downloading Images&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;如果你点击列表的每一行，app会提供一个天气的详细页面，用动画的方式显示了当前的天气。 很棒，现在动画有了一个简单的背景，有什么更好的方式来更新背景呢？这就是我们这个教程中介绍AFNetworking的最后一招。AFHTTPRequestOperation可以通过设置responseSerializer为一个AFImageResponseSerializer实例来处理图片。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;有两个方法在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WeatherAnimationViewController.m&lt;/code&gt;中被实现，找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;updateBackgroundImage:&lt;/code&gt;方法，用下面代码替换：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)updateBackgroundImage:(id)sender
{
    NSURL &lt;span style=&quot;color: teal;&quot;&gt;*url&lt;/span&gt; = [NSURL URLWithString:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;http:&lt;span style=&quot;color: rgb(0, 153, 38);&quot;&gt;//www&lt;/span&gt;.&lt;a href=&quot;http://raywenderlich.com/wp-content/uploads/&quot;&gt;raywenderlich.com/wp-content/uploads/&lt;/a&gt;&lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;2014&lt;/span&gt;/&lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;01&lt;/span&gt;/sunny-background.png&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;];
    NSURLRequest &lt;span style=&quot;color: teal;&quot;&gt;*request&lt;/span&gt; = [NSURLRequest requestWithURL:url];

    AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt; = [[AFHTTPRequestOperation alloc] initWithRequest:request];
    operation.responseSerializer = [AFImageResponseSerializer serializer];

    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, id responseObject) {

        self.backgroundImageView.image = responseObject;
        [self saveImage:responseObject withFilename:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;background.png&quot;&lt;/span&gt;];

    } failure:^(AFHTTPRequestOperation &lt;span style=&quot;color: teal;&quot;&gt;*operation&lt;/span&gt;, NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt;) {

        NSLog(&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;Error: &lt;span style=&quot;color: teal;&quot;&gt;%@&lt;/span&gt;&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;, error);
    }];

    [operation start];
}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个方法就是在后台处理下载任务。完成后，将会返回完整的图片。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;在&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;WeatherAnimationViewController.m&lt;/code&gt;您会看到两个帮助方法。&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;imageWithFilename:&lt;/code&gt;和&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;saveImage:withFilename:&lt;/code&gt;，他们帮助我们储存和下载图片文件。&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;updateBackgroundImage:&lt;/code&gt;帮助我们将图片储存到硬盘中。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;找到&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 3px 4px; font-size: 12px; color: rgb(221, 17, 68); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232);&quot;&gt;deleteBackgroundImage:&lt;/code&gt;方法，替换相应的代码：&lt;/p&gt;
&lt;pre style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; word-wrap: break-word; padding: 9.5px; font-size: 12px; color: rgb(68, 68, 68); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; line-height: 20px; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.148438); white-space: pre-wrap; word-break: break-all;&quot;&gt;
&lt;code style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; padding: 0.5em; color: rgb(51, 51, 51); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 255); border: 0px;&quot;&gt;- (IBAction)deleteBackgroundImage:(id)sender
{
    NSArray &lt;span style=&quot;color: teal;&quot;&gt;*paths&lt;/span&gt; = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString &lt;span style=&quot;color: teal;&quot;&gt;*path&lt;/span&gt; = [[paths objectAtIndex:&lt;span style=&quot;color: rgb(0, 153, 153);&quot;&gt;0&lt;/span&gt;] stringByAppendingPathComponent:&lt;span style=&quot;color: teal;&quot;&gt;@&quot;&lt;/span&gt;WeatherHTTPClientImages/&lt;span style=&quot;color: rgb(221, 17, 68);&quot;&gt;&quot;];

    NSError &lt;span style=&quot;color: teal;&quot;&gt;*error&lt;/span&gt; = nil;
    [[NSFileManager defaultManager] removeItemAtPath:path error:&amp;amp;error];

    NSString &lt;span style=&quot;color: teal;&quot;&gt;*desc&lt;/span&gt; = [self.weatherDictionary weatherDescription];
    [self start:desc];
}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;这个方法可以删除图片文件，让你可以再次下载图片来测试程序。&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;最后，运行项目，下载天气数据，点击列表的一行，进入详细页，从这里，点击更新按钮，如果你选择的是晴天，那么你将会看到下面的界面：&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;&lt;img src=&quot;https://raw.github.com/Qpai/Qpai.github.io/master/_images/134ff62e3452eb08e4e78c6065ad1b00.png&quot; height=&quot;500&quot; width=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;h2 style=&quot;color: rgb(68, 68, 68); text-rendering: optimizelegibility; font-size: 24px; line-height: 40px; font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace;&quot;&gt;Where To Go From Here?&lt;/h2&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;你可以下载完整的项目从&lt;a href=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2014/01/Weather_Final.zip&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: none;&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px; color: rgb(68, 68, 68);&quot;&gt;所有的这些方法让你使用AFNetworking和外面的世界交互了。&lt;/p&gt;
&lt;ol style=&quot;padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;AFHTTPOperation 、 AFJSONResponseSerializer、 AFPropertyListResponseSerializer、 AFXMLParserResponseSerializer 这些解析器用来解析返回数据的结构。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;UIImageView+AFNetworking快速填充图片视图。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;自定义AFHTTPSessionManager子类去处理在线Web服务。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;AFNetworkActivityIndicatorManager保持用户通知。&lt;/li&gt;
&lt;li style=&quot;line-height: 22px;&quot;&gt;AFHTTPOperation 和 AFImageResponseSerializer是你处理图片请求的强大力量。&lt;/li&gt;
&lt;/ol&gt;
&lt;span style=&quot;color: rgb(68, 68, 68); font-family: Monaco, Menlo, &#39;Ubuntu Mono&#39;, Consolas, source-code-pro, SimSun, Song, 宋体, 幼圆, Heiti, 黑体, 文泉驿等宽正黑, 文泉驿正黑, monospace; font-size: 13px; line-height: 20px;&quot;&gt;如果你有任何问题，请访问论坛获取帮助，当然，我也很高兴看到你的评论。&lt;/span&gt;
&lt;/body&gt;&lt;/html&gt;</description>
                <link>http://Qpai.github.io/%E7%BF%BB%E8%AF%91/2014/02/27/AFNetworking-2.0-Tutorial</link>
                <guid>http://Qpai.github.io/%E7%BF%BB%E8%AF%91/2014/02/27/AFNetworking-2.0-Tutorial</guid>
                <pubDate>2014-02-27T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>
&lt;p&gt;我的博客建好了！&lt;/p&gt;

&lt;p&gt;以前见建过很多博客，几乎都荒废了。这次我希望能坚持下来！&lt;/p&gt;

&lt;p&gt;在我的博客中，我希望，多分享一些翻译的文章，尽量抽时间写一些自己写的技术文章，能给广大开发人员做一些贡献。&lt;/p&gt;

&lt;p&gt;而我自己是移动开发，目前主攻iOS，所以，技术文章主要是iOS相关的。&lt;/p&gt;
</description>
                <link>http://Qpai.github.io/other/2014/02/26/hello-world</link>
                <guid>http://Qpai.github.io/other/2014/02/26/hello-world</guid>
                <pubDate>2014-02-26T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
